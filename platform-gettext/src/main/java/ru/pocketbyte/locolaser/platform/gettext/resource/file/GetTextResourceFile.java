/*
 * Copyright Â© 2017 Denis Shurygin. All rights reserved.
 * Licensed under the Apache License, Version 2.0
 */

package ru.pocketbyte.locolaser.platform.gettext.resource.file;

import ru.pocketbyte.locolaser.config.WritingConfig;
import ru.pocketbyte.locolaser.resource.entity.*;
import ru.pocketbyte.locolaser.resource.file.ResourceStreamFile;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.LineNumberReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * ResourceFile implementation for Android platform.
 *
 * @author Denis Shurygin
 */
public class GetTextResourceFile extends ResourceStreamFile {


    public static String GENERATED_GETTEXT_COMMENT =
          "# AUTO-GENERATED FILE. DO NOT MODIFY.\r\n" +
          "#\r\n" +
          "# This file was automatically generated by the LocoLaser tool.\r\n" +
          "# It should not be modified by hand.\r\n" +
          "msgid \"\"\r\n" +
          "msgstr \"\"\r\n" +
          "\"MIME-Version: 1.0\\n\"\r\n" +
          "\"Content-Type: text/plain; charset=utf-8\\n\"\r\n" +
          "\"Content-Transfer-Encoding: 8bit\\n\"\r\n" +
          "\"Generated-By: LocoLaser\\n\"";

    private static final String COMMENT_SINGLE_LINE = "#";
    private static final String KEY_LINE_PATTERN = "msgid \"((?:[^\"]|\\\\\")*)\"\\s*";
    private static final String VALUE_LINE_PATTERN = "msgstr \"((?:[^\"]|\\\\\")*)\"\\s*";

    private final String mLocale;

    public GetTextResourceFile(File file, String locale) {
        super(file);
        mLocale = locale;
    }

    @Override
    public ResMap read() {
        if (mFile.exists()) {
            ResLocale result = new ResLocale();

            Matcher keyMatcher = Pattern.compile(KEY_LINE_PATTERN).matcher("");
            Matcher valueMatcher = Pattern.compile(VALUE_LINE_PATTERN).matcher("");

            Path path = Paths.get(mFile.toURI());
            try (
                    BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8);
                    LineNumberReader lineReader = new LineNumberReader(reader)
            ) {
                String line;
                StringBuilder comment = null;
                String key = null;

                while ((line = lineReader.readLine()) != null) {

                    if (key == null && line.startsWith(COMMENT_SINGLE_LINE)) {
                        if (comment == null)
                            comment = new StringBuilder(line.substring(COMMENT_SINGLE_LINE.length()));
                        else {
                            comment.append("\n");
                            comment.append(line.substring(COMMENT_SINGLE_LINE.length()));
                        }
                    }
                    else if (key == null){
                        keyMatcher.reset(line);
                        if (keyMatcher.find() && keyMatcher.groupCount() == 1) {
                            key = keyMatcher.group(1);
                            if (key == null || key.length() == 0) {
                                comment = null;
                                key = null;
                            }
                        }
                        else {
                            comment = null;
                        }
                    }
                    else {
                        valueMatcher.reset(line);
                        if (valueMatcher.find() && valueMatcher.groupCount() == 1) {
                            String value = valueMatcher.group(1);

                            ResItem item = new ResItem(key);
                            item.addValue(new ResValue(fromPlatformValue(value), comment != null ? comment.toString().trim() : null, null));
                            result.put(item);
                        }

                        comment = null;
                        key = null;
                    }
                }
            } catch (IOException e) {
                // Do nothing
                e.printStackTrace();
            }


            ResMap resMap = new ResMap();
            resMap.put(mLocale, result);
            return resMap;
        }
        return null;
    }

    @Override
    public void write(ResMap resMap, WritingConfig writingConfig) throws IOException {
        open();

        writeStringLn(GENERATED_GETTEXT_COMMENT);
        writeln();

        ResLocale items = resMap.get(mLocale);

        boolean isFirst = true;
        for (String key: items.keySet()) {
            ResItem resItem = items.get(key);
            if (resItem != null) {
                if (!isFirst) {
                    writeln();
                    writeln();
                }
                else {
                    isFirst = false;
                }

                String comment = resItem.values.get(0).comment;
                String value = resItem.values.get(0).value;

                if (comment != null && (
                        (writingConfig == null || writingConfig.isDuplicateComments()) || !comment.equals(value))) {
                    writeString(COMMENT_SINGLE_LINE);
                    writeString(" ");
                    writeString(comment);
                    writeln();
                }
                writeString("msgid \"");
                writeString(resItem.key);
                writeString("\"");
                writeln();

                writeString("msgstr \"");
                writeString(toPlatformValue(value));
                writeString("\"");
            }
        }

        close();
    }

    static String toPlatformValue(String string) {
        string = string
                .replace("\"", "\\\"")
                .replace("\n", "\\n")
                .replaceAll("%s", "%@")
                .replaceAll("%([0-9]{1,})\\$s", "%$1\\$@");
        return string;
    }

    static String fromPlatformValue(String string) {
        string = string
                .replace("\\\"", "\"")
                .replace("\\n", "\n")
                .replaceAll("%@", "%s")
                .replaceAll("%([0-9]{1,})\\$@", "%$1\\$s");
        return string;
    }
}
