apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: "maven-publish"
apply plugin: 'com.jfrog.bintray'

dependencies {
    noJarCompile project(':core')
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    compile 'com.google.api-client:google-api-client-java6:1.22.0'
    compile 'com.google.gdata:core:1.47.1'
    compile 'com.google.http-client:google-http-client-jackson2:1.22.0'
    compile 'com.google.oauth-client:google-oauth-client-java6:1.22.0'
    compile 'com.google.oauth-client:google-oauth-client-jetty:1.22.0'
    compile 'com.google.oauth-client:google-oauth-client:1.22.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

jar {
    // Include all libraries into result JAR file.
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

task copyAppProperties(type: Copy) {
    from 'src/main/resources/properties'
    into 'build/resources/main/properties'

    File propFile = project.rootProject.file('local.properties')
    if (propFile.exists()) {
        Properties props = new Properties()
        props.load(propFile.newDataInputStream())
        def values = [
                google_oauth_api_key   : props.get("google_oauth_api_key", "none"),
                google_oauth_api_secret: props.get("google_oauth_api_secret", "none")
        ]
        inputs.properties(values)
        expand(values)
    }
}

task printGoogleApiKeys {
    doLast {
        File propFile = project.rootProject.file('local.properties')
        Properties props = new Properties()
        props.load(propFile.newDataInputStream())
        println(props.get("google_oauth_api_key", "none"))
        println(props.get("google_oauth_api_secret", "none"))
    }
}

processResources.finalizedBy(copyAppProperties)

jar {
    // Include all libraries into result JAR file. Except noJarCompile dependencies
    from {
        (configurations.compile - configurations.noJarCompile).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

task generateJavadocs(type: Javadoc) {
    source {
        sourceSets.main.allJava
    }
    failOnError = false
}

task sourceDoc(type: Jar, dependsOn: generateJavadocs) {
    from javadoc.destinationDir
}

publishing {
    publications {
        locolaserPublication(MavenPublication) {
            from components.java
            groupId 'ru.pocketbyte.locolaser'
            artifactId project.name
            version project.version
            pom.withXml {
                def root = asNode()
                root.remove(root.get('dependencies'))
                def dependencies = root.appendNode('dependencies')

                // Add core dependency
                def coreDependency = dependencies.appendNode('dependency')
                coreDependency.appendNode('groupId', 'ru.pocketbyte.locolaser')
                coreDependency.appendNode('artifactId', 'core')
                coreDependency.appendNode('version', project.version)
                coreDependency.appendNode('scope', 'runtime')
            }
            artifact sourceJar {
                classifier "sources"
            }
            artifact sourceDoc {
                classifier "javadoc"
            }
        }
    }
}

bintray {
    publish = project.bintray_publish
    override = project.bintray_override
    user = project.bintray_user
    key = project.bintray_key
    
    pkg {
        repo = 'maven'
        name = "locolaser-${project.name}"
        userOrg = 'pocketbyte'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/PocketByte/LocoLaser.git'
        websiteUrl = 'https://github.com/PocketByte/LocoLaser'
        issueTrackerUrl = 'https://github.com/PocketByte/LocoLaser/issue'
        version {
            name = project.version
            desc = 'Implementation of source for LocoLaser tool to work with Google Sheets.'
            released  = new Date()
            vcsTag = project.version
            gpg.passphrase = project.properties.get("bintray.publish.gpgPassphrase")
        }
        publications = ['locolaserPublication']
    }
}